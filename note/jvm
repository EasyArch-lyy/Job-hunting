JVM 发生内存溢出的 8 种原因、及解决办法 
{
        1. Java 堆空间
造成原因

    无法在 Java 堆中分配对象
    吞吐量增加
    应用程序无意中保存了对象引用，对象无法被 GC 回收
    应用程序过度使用 finalizer。finalizer 对象不能被 GC 立刻回收。finalizer 由结束队列服务的守护线程调用，有时 finalizer 线程的处理能力无法跟上结束队列的增长

解决方案

    使用 -Xmx 增加堆大小
    修复应用程序中的内存泄漏
					
        2. GC 开销超过限制
造成原因

    Java 进程98%的时间在进行垃圾回收，恢复了不到2%的堆空间，最后连续5个（编译时常量）垃圾回收一直如此。

解决方案

    使用 -Xmx 增加堆大小
    使用 -XX:-UseGCOverheadLimit 取消 GC 开销限制
    修复应用程序中的内存泄漏

        3. 请求的数组大小超过虚拟机限制
造成原因
    应用程序试图分配一个超过堆大小的数组
解决方案
    使用 -Xmx 增加堆大小
    修复应用程序中分配巨大数组的 bug

        4. Perm gen 空间
造成原因

Perm gen 空间包含：
    类的名字、字段、方法
    与类相关的对象数组和类型数组
    JIT 编译器优化
当 Perm gen 空间用尽时，将抛出异常。

解决方案

    使用 -XX: MaxPermSize 增加 Permgen 大小
    不重启应用部署应用程序可能会导致此问题。重启 JVM 解决

        5. Metaspace
造成原因

    从 Java 8 开始 Perm gen 改成了 Metaspace，在本机内存中分配 class 元数据（称为 metaspace）。如果 metaspace 耗尽，则抛出异常

解决方案

    通过命令行设置 -XX: MaxMetaSpaceSize 增加 metaspace 大小
    取消 -XX: maxmetsspacedize
    减小 Java 堆大小,为 MetaSpace 提供更多的可用空间
    为服务器分配更多的内存
    可能是应用程序 bug，修复 bug

        6. 无法新建本机线程
造成原因

    内存不足，无法创建新线程。由于线程在本机内存中创建，报告这个错误表明本机内存空间不足

解决方案

    为机器分配更多的内存
    减少 Java 堆空间
    修复应用程序中的线程泄漏。
    增加操作系统级别的限制
          - ulimit -a
    用户进程数增大 (-u) 1800
    使用 -Xss 减小线程堆栈大小

        7. 杀死进程或子进程
造成原因

    内核任务：内存不足结束器，在可用内存极低的情况下会杀死进程
解决方案

    将进程迁移到不同的机器上
    给机器增加更多内存
与其他 OOM 错误不同，这是由操作系统而非 JVM 触发的。
        8. 发生 stack_trace_with_native_method
造成原因

    本机方法（native method）分配失败
    打印的堆栈跟踪信息，最顶层的帧是本机方法

解决方案

    使用操作系统本地工具进行诊断


}


永久带：Class的静态信息，Main方法信息，常量信息，静态方法和变量信息，共享变量

java虚拟机结束生命周期：{
  执行System.exit();
  程序执行结束
  执行遇到异常或错误
  操作系统出错java终止
}
{
 加载：查找加载类的二进制数据{
  类加载器{
     根类加载器（Bootstrap）
     扩展类加载器(Extension)
     系统/应用类加载器(System)
  }
  加载方式{
    本地系统直接加载
    网络下载.class
    zip,jar归档文件加载.class文件
    从专有数据库中提取.class文件
    将java源文件动态编译为.class文件（动态代理、jsp页面--被编译为----->servlet（java .class））
  }
   --双亲委派机制：
    自定义loader想要加载某类，向上寻找检查父类加载器是否被加载到，-->系统类加载器-->扩展类加载器-->根类加载器，自顶向下加载类
    目的：避免重复加载，提供安全策略，避免加载外来的java开头的加载器篡改数据
 }
 连接：
   -验证：确保被加载的类正确性
   -准备：为类的静态变量分配内存，将其初始化默认值
   为类变量分配内存，设置默认值，到达默认值之前，类变量没有初始化为初始值
   -解析：把类中的符号引用转换为直接引用
   在类型的常量池中寻找类，接口，字段和方法的符号引用，把符号引用换为直接引用
初始化：为类的静态变量赋予正确的初始值
  --类实例化：
为新对象分配内存、为实例赋默认值、为变量赋正确的初始值
 使用
 卸载
}
java程序对类的使用方式：主动使用、被动使用（不会导致类初始化）{
--主动使用：
   创建类的实例
   访问某个类或接口的静态变量(getstatic)，或对该静态变量赋值(putstatic)
   反射
   初始化类的子类
   java虚拟机启动时被标明启动类的类（包含main方法的类）
   jdk1.7开始提供动态语言支持
（java虚拟接实现在每个类或接口被java首次主动使用才初始化）   
}


