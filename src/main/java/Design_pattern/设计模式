责任链模式 ----> Responsibility_chain

纯的责任链模式：

    一个具体处理者对象只能在两个行为中选择一个：要么承担全部责任，要么将责任推给下家，不允许出现某一个具体处理者对象在承担了一部分或全部责任后
 又将责任向下传递的情况
    一个请求必须被某一个处理者对象所接收，不能出现某个请求未被任何一个处理者对象处理的情况
不纯的责任链模式：

    允许某个请求被一个具体处理者部分处理后再向下传递
    或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求
    而且一个请求可以最终不被任何处理者对象所接收

典型应用：

    Tomcat 过滤器中的责任链模式
    Netty 中的 Pipeline 和 ChannelHandler 通过责任链设计模式来组织代码逻辑
    Spring Security 使用责任链模式，可以动态地添加或删除责任（处理 request 请求）
    Spring AOP 通过责任链模式来管理 Advisor
    Dubbo Filter 过滤器链也是用了责任链模式（链表），可以对方法调用做一些过滤处理，譬如超时(TimeoutFilter)，异常(ExceptionFilter)，Token(TokenFilter)等
    Mybatis 中的 Plugin 机制使用了责任链模式，配置各种官方或者自定义的 Plugin，与 Filter 类似，可以在执行 Sql 语句的时候做一些操作
职责链模式的主要优点

    对象仅需知道该请求会被处理即可，且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度
    请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有的候选处理者的引用，可简化对象的相互连接
    在给对象分派职责时，职责链可以给我们更多的灵活性，可以在运行时对该链进行动态的增删改，改变处理一个请求的职责
    新增一个新的具体请求处理者时无须修改原有代码，只需要在客户端重新建链即可，符合 "开闭原则"
    职责链模式的主要缺点

一个请求可能因职责链没有被正确配置而得不到处理
    对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，且不方便调试
    可能因为职责链创建不当，造成循环调用，导致系统陷入死循环
适用场景

    有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的
    在不明确指定接收者的情况下，向多个对象中的一个提交一个请求
    可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序
